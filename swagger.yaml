openapi: "3.0.0"
info:
  title: "Car Management API"
  version: "1.0.0"
  description: "This is a REST API that can be used to manage car data with authentication features."
servers:
  - url: "http://localhost:3000"
paths:
  /api/v1/register:
    post:
      tags:
        - Authentication
      summary: Register a New Member
      description: Endpoint to register a new member with username, email, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        500:
          description: Internal Server Error
  /api/v1/login:
    post:
      tags:
        - Authentication
      summary: Login with Email and Password
      description: Endpoint to Authenticate user with email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        500:
          description: Internal Server Error
  /api/v1/user:
    get:
      tags:
        - Users
      summary: Getting All Users
      description: Endpoint to getting all users
      responses:
        200:
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        500:
          description: Internal Server Error
  /api/v1/who-am-i:
    get:
      tags:
        - Users
      summary: Getting Current User
      description: Endpoint to getting current user
      security:
        - bearerAuth: []
      responses:
        200:
          description: Find the current user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        500:
          description: Internal Server Error
  /api/v1/admin:
    post:
      tags:
        - Users
      summary: Adding New Admin
      description: Endpoint to add a new admin with username, email, password, and role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: Adding new admin successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        500:
          description: Internal Server Error
  /api/v1/cars:
    get:
      security:
        - bearerAuth: []
      tags:
        - Cars
      summary: Getting All Cars
      description: Endpoint to getting all cars
      responses:
        200:
          description: List of all cars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cars"
        500:
          description: Internal Server Error
    post:
      tags:
        - Cars
      summary: Adding Cars
      description: Endpoint to adding a new cars
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Cars"
      responses:
        201:
          description: Cars created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cars"
        500:
          description: Internal Server Error
  /api/v1/cars/{id}:
    get:
      tags:
        - Cars
      summary: Getting Specified Cars
      description: Endpoint to getting specified cars
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Cars Id
      responses:
        200:
          description: The Cars found by Id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cars"
        500:
          description: Internal Server Error
    put:
      tags:
        - Cars
      summary: Update Cars
      description: Endpoint to update cars
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The Cars Id
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Cars"
      responses:
        200:
          description: The Cars data was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cars"
        404:
          description: The Cars was not found
        500:
          description: Internal Server Error
    delete:
      tags:
        - Cars
      summary: Delete Cars
      description: Endpoint to delete cars
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Cars Id
      responses:
        200:
          description: The Cars was deleted
        404:
          description: The Cars was not found
        500:
          description: Internal Server Error

# components
components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
        - password
      properties:
        id:
          type: string
          description: The auto-generated id of the user
        username:
          type: string
          description: The username
        email:
          type: string
          description: The user's email
        password:
          type: string
          description: The user's password
        role:
          type: string
          description: The user's role
      example:
        id: 6e2bc663-5197-441a-957b-bc75e4a2da7d
        username: Superadmin
        email: superadmin@gmail.com
        password: superadmin
        role: Superadmin
    Cars:
      type: object
      required:
        - id
        - plate
        - manufacture
        - model
        - image
        - rentPerDay
        - capacity
        - description
        - availableAt
        - transmission
        - available
        - type
        - year
        - options
        - specs
        - createdBy
        - updatedBy
        - deletedBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: The auto-generated id of the car
        plate:
          type: string
          description: The plate of the car
        manufacture:
          type: string
          description: The manufacture of the car
        model:
          type: string
          description: The model of the car
        image:
          type: string
          description: The image of the car
        rentPerDay:
          type: number
          description: The price per day of the car
        capacity:
          type: number
          description: The capacity of the car
        description:
          type: string
          description: The description of the car
        availableAt:
          type: string
          description: The availability date of the car
        transmission:
          type: string
          description: The transmission of the car
        available:
          type: boolean
          description: The availability status of the car
        type:
          type: string
          description: The type of the car
        year:
          type: number
          description: The year the car was made
        options:
          type: array
          items:
            type: string
          description: The options of the car
        specs:
          type: array
          items:
            type: string
          description: The specifications of the car
        createdBy:
          type: string
          description: The user who created the car
        updatedBy:
          type: string
          description: The user who last updated the car
        deletedBy:
          type: string
          description: The user who deleted the car
        createdAt:
          type: string
          description: The creation date of the car
        updatedAt:
          type: string
          description: The last update date of the car
      example:
        id: 6e2bc663-5197-441a-957b-bc75e4a2da7c
        plate: DBH-3491
        manufacture: Ford
        model: F150
        image: ./images/car01.min.jpg
        rentPerDay: 200000
        capacity: 2
        description: Brake assist. Leather-wrapped shift knob. Glove box lamp. Air conditioning with in-cabin microfilter.
        availableAt: "2022-03-23T15:49:05.563Z"
        transmission: Automatic
        available: true
        type: Sedan
        year: 2022
        options:
          - Cruise Control
          - Tinted Glass
          - AM/FM Stereo
        specs:
          - Brake assist
          - Leather-wrapped shift knob
          - Glove box lamp
          - Air conditioning with in-cabin microfilter
          - Body color folding remote-controlled power mirrors
          - Dual-stage front airbags with occupant classification system
        createdBy: 26634b5d-e911-43c9-9555-d21672e5a101
        updatedBy: 26634b5d-e911-43c9-9555-d21672e5a101
        deletedBy: null
        createdAt: "2022-01-01T00:00:00.000Z"
        updatedAt: "2022-01-01T00:00:00.000Z"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
